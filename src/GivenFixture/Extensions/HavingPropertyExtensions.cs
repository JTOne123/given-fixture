using System;

namespace GivenFixture.Extensions
{
    /// <summary>
    /// Extensions to manage properties for <see cref="ITestFixture"/>.
    /// </summary>
    public static class HavingPropertyExtensions
    {
        /// <summary>
        /// Adds the specified property value to the specified key.
        /// </summary>
        /// <param name="fixture">The fixture.</param>
        /// <param name="key">The key.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static ITestFixture HavingProperty<TValue>(this ITestFixture fixture, string key, TValue value)
        {
            fixture.Properties[key] = value;
            return fixture;
        }

        /// <summary>
        /// Adds the property value generated by the specified factory to the specified key.
        /// </summary>
        /// <param name="fixture">The fixture.</param>
        /// <param name="key">The key.</param>
        /// <param name="valueFactory">The value factory.</param>
        /// <returns></returns>
        public static ITestFixture HavingProperty<TValue>(this ITestFixture fixture, string key, Func<TValue> valueFactory) =>
            fixture.HavingProperty(key, valueFactory());

        /// <summary>
        /// Runs the specified fixture action if a property exists in the fixture that matches the specified value predicate.
        /// </summary>
        /// <param name="fixture">The fixture.</param>
        /// <param name="key">The key.</param>
        /// <param name="valuePredicate">The value predicate.</param>
        /// <param name="action">The action.</param>
        /// <returns></returns>
        public static ITestFixture WhenHavingProperty<TValue>(this ITestFixture fixture,
                                                              string key,
                                                              Func<TValue, bool> valuePredicate,
                                                              Action<ITestFixture> action)
        {
            if (fixture.Properties.TryGetValue(key, out var value) && value is TValue v && valuePredicate(v))
            {
                action(fixture);
            }

            return fixture;
        }

        /// <summary>
        /// Runs the specified fixture action if a property exists in the fixture that matches the specified value.
        /// </summary>
        /// <typeparam name="TValue">The type of the value.</typeparam>
        /// <param name="fixture">The fixture.</param>
        /// <param name="key">The key.</param>
        /// <param name="value">The value.</param>
        /// <param name="action">The action.</param>
        /// <returns></returns>
        public static ITestFixture WhenHavingProperty<TValue>(this ITestFixture fixture,
                                                              string key,
                                                              TValue value,
                                                              Action<ITestFixture> action) =>
            fixture.WhenHavingProperty<TValue>(key, v => v.Equals(value), action);

        /// <summary>
        /// Runs the specified fixture action if a property exists in the fixture that matches the specified value predicate.
        /// </summary>
        /// <param name="fixture">The fixture.</param>
        /// <param name="key">The key.</param>
        /// <param name="valuePredicate">The value predicate.</param>
        /// <param name="action">The action.</param>
        /// <returns></returns>
        public static ITestFixture WhenHavingStringProperty(this ITestFixture fixture,
                                                            string key,
                                                            Func<string, bool> valuePredicate,
                                                            Action<ITestFixture> action) =>
            fixture.WhenHavingProperty(key, valuePredicate, action);

        /// <summary>
        /// Runs the specified fixture action if a property exists in the fixture that matches the specified value.
        /// </summary>
        /// <param name="fixture">The fixture.</param>
        /// <param name="key">The key.</param>
        /// <param name="value">The value.</param>
        /// <param name="action">The action.</param>
        /// <returns></returns>
        public static ITestFixture WhenHavingStringProperty(this ITestFixture fixture,
                                                            string key,
                                                            string value,
                                                            Action<ITestFixture> action) =>
            fixture.WhenHavingStringProperty(key, x => x == value, action);
    }
}